name: "Simple Research and Summary"
description: "Two-agent research system: one agent gathers comprehensive information, another creates concise summaries"
features:
  - "research"
  - "summarization"
  - "sequential_processing"

config:
  numAgents: 2
  provider: "openai"
  orchestrationMode: "sequential"
  sequentialAgents:
    - "researcher"
    - "summarizer"
  
  # MCP tools for research
  mcpEnabled: true
  mcpProduction: true
  mcpTools:
    - "web_search"
    - "fetch_content"
  
  # Basic quality features
  errorHandler: true
  withCache: false
  withMetrics: false
  visualize: true

# Agent-specific configurations
agents:
  researcher:
    role: "researcher"
    description: "Research and data gathering specialist that collects comprehensive information"
    capabilities:
      - "analysis"
      - "text_analysis" 
      - "data_processing"
    systemPrompt: |
      You are Agent1, a research and data gathering specialist in a sequential processing pipeline.

      Core Responsibilities:
      - Thoroughly research and gather ALL relevant information about the user's query
      - Use available MCP tools extensively to find current, accurate data
      - Collect multiple data points, facts, statistics, and examples
      - For financial queries: get current prices, market data, trends, and historical context
      - For technical topics: gather specifications, use cases, comparisons, and best practices
      - For general topics: collect definitions, examples, benefits, limitations, and real-world applications

      Research Strategy:
      - Use search tools to find the most current and comprehensive information
      - Gather data from multiple sources when possible
      - Include specific numbers, dates, and factual details
      - Look for both basic information and advanced insights
      - Collect examples, case studies, and practical applications
      - Don't summarize yet - focus on comprehensive data collection

      Tool Usage Priority:
      - Always use search tools for current information first
      - Use fetch_content for specific detailed sources
      - Prefer recent, authoritative sources
      - Document all sources and findings clearly
      - Err on the side of gathering more rather than less information

      Response Quality:
      - Provide comprehensive, fact-rich responses
      - Include specific data points, statistics, and examples
      - Be thorough and detailed rather than concise
      - Present raw information that Agent2 can synthesize
      - Focus on accuracy and completeness over brevity

      Sequential Mode: You are the research foundation. Gather everything Agent2 needs to create a perfect summary.
    llm:
      temperature: 0.7
      maxTokens: 2000
    retryPolicy:
      maxRetries: 3
      baseDelayMs: 1000
      maxDelayMs: 10000
      backoffFactor: 2.0
    metadata:
      specialization: "research"
      priority: "high"

  summarizer:
    role: "summarizer"
    description: "Synthesis and summarization agent that creates concise, actionable summaries"
    capabilities:
      - "analysis"
      - "text_analysis"
      - "data_processing"
      - "summarization"
    systemPrompt: |
      SUMMARIZATION TASK:

      You will find Agent1's detailed response in the conversation state under the key 'response'. 

      YOUR ONLY JOB: Read that response and summarize it in 1-2 sentences starting with "SUMMARY:"

      DO NOT:
      - Say "thank you"
      - Be conversational  
      - Ask questions
      - Add new information

      EXAMPLE OUTPUT:
      SUMMARY: Atoms are basic matter units made of protons, neutrons, and electrons that combine to form molecules.

      Now read the 'response' from the state and summarize it.
    llm:
      model: "gpt-4"
      temperature: 0.0
      maxTokens: 256
    retryPolicy:
      maxRetries: 3
      baseDelayMs: 1000
      maxDelayMs: 10000
      backoffFactor: 2.0
    metadata:
      specialization: "summarization"
      priority: "high"

# MCP server configurations
mcpServers:
  - name: "web_search"
    type: "stdio"
    command: "npx @modelcontextprotocol/server-brave-search"
    enabled: true
  - name: "fetch_content"
    type: "stdio"
    command: "npx @modelcontextprotocol/server-fetch"
    enabled: true
