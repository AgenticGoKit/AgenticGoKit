<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>contributors :: AgenticGoKit Docs</title>
    <link>http://localhost:1313/AgenticGoKitDocs/contributors/index.html</link>
    <description>Contributor Documentation Navigation: Documentation Home → Contributors&#xA;For developers contributing to AgenticGoKit&#xA;This section contains documentation specifically for contributors to the AgenticGoKit project. If you’re looking to use AgenticGoKit in your projects, see the main documentation.&#xA;🚀 Getting Started Essential Reading Contributor Guide - Start here! Development setup and contribution workflow Core vs Internal - Understanding the public API vs implementation details Code Style - Go standards and project conventions Development Process Adding Features - How to extend AgenticGoKit with new features Testing Strategy - Unit tests, integration tests, and benchmarks Documentation Standards - Writing user-focused documentation Project Management Release Process - How releases are managed and versioned 🏗️ Architecture Overview AgenticGoKit is designed with a clear separation between public APIs and internal implementation:</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/AgenticGoKitDocs/contributors/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>contributors</title>
      <link>http://localhost:1313/AgenticGoKitDocs/contributors/readme/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/contributors/readme/index.html</guid>
      <description>Contributor Documentation Navigation: Documentation Home → Contributors&#xA;For developers contributing to AgenticGoKit&#xA;This section contains documentation specifically for contributors to the AgenticGoKit project. If you’re looking to use AgenticGoKit in your projects, see the main documentation.&#xA;🚀 Getting Started Essential Reading Contributor Guide - Start here! Development setup and contribution workflow Core vs Internal - Understanding the public API vs implementation details Code Style - Go standards and project conventions Development Process Adding Features - How to extend AgenticGoKit with new features Testing Strategy - Unit tests, integration tests, and benchmarks Documentation Standards - Writing user-focused documentation Project Management Release Process - How releases are managed and versioned 🏗️ Architecture Overview AgenticGoKit is designed with a clear separation between public APIs and internal implementation:</description>
    </item>
    <item>
      <title>ContributorGuide</title>
      <link>http://localhost:1313/AgenticGoKitDocs/contributors/contributorguide/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/contributors/contributorguide/index.html</guid>
      <description>Contributor Guide Navigation: Documentation Home → Contributors → Contributor Guide&#xA;Contributing to AgenticGoKit Development&#xA;Note: This is contributor documentation. If you’re looking to use AgenticGoKit in your projects, see the main documentation.&#xA;Welcome to AgenticGoKit! This guide will help you get started with contributing to the project, understanding the codebase, and following our development practices.&#xA;Quick Start for Contributors 1. Development Setup # Clone the repository git clone https://github.com/kunalkushwaha/agenticgokit.git cd agenticgokit # Install dependencies go mod tidy # Run tests to ensure everything works go test ./... # Install development tools go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest&#xD;2. Project Structure agenticgokit/&#xD;├── cmd/ # CLI tools&#xD;│ └── agentcli/ # AgentFlow CLI&#xD;├── core/ # Public API (this is what users import)&#xD;│ ├── agent.go # Agent interfaces&#xD;│ ├── mcp.go # MCP integration public API&#xD;│ ├── factory.go # Factory functions&#xD;│ └── ...&#xD;├── internal/ # Private implementation (not importable)&#xD;│ ├── agents/ # Agent implementations&#xD;│ ├── mcp/ # MCP client management&#xD;│ ├── llm/ # LLM provider implementations&#xD;│ ├── orchestrator/ # Workflow orchestration&#xD;│ └── scaffold/ # CLI project generation&#xD;├── examples/ # Example projects and demos&#xD;├── docs/ # Documentation&#xD;└── benchmarks/ # Performance benchmarks&#xD;3. Core vs Internal Architecture core/ Package (Public API):</description>
    </item>
    <item>
      <title>CodeStyle</title>
      <link>http://localhost:1313/AgenticGoKitDocs/contributors/codestyle/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/contributors/codestyle/index.html</guid>
      <description>Code Style Guide This document defines the coding standards and conventions for AgenticGoKit to ensure consistency, readability, and maintainability across the codebase.&#xA;🎯 Core Principles Clarity over Cleverness: Write code that is easy to understand Consistency: Follow established patterns throughout the codebase Simplicity: Prefer simple solutions over complex ones Performance: Be mindful of performance implications Documentation: Code should be self-documenting with helpful comments 🏗️ Go Language Standards Follow Standard Go Conventions AgenticGoKit adheres to all standard Go conventions:</description>
    </item>
    <item>
      <title>CoreVsInternal</title>
      <link>http://localhost:1313/AgenticGoKitDocs/contributors/corevsinternal/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/contributors/corevsinternal/index.html</guid>
      <description>Core vs Internal Architecture Understanding AgenticGoKit’s Package Structure&#xA;AgenticGoKit uses a clear separation between public API (core/) and private implementation (internal/) to provide a stable, developer-friendly interface while maintaining implementation flexibility.&#xA;Overview agenticgokit/&#xD;├── core/ # Public API - what users import&#xD;│ ├── agent.go # Agent interfaces and types&#xD;│ ├── mcp.go # MCP integration public API │ ├── factory.go # Factory functions for creating components&#xD;│ ├── llm.go # LLM provider interfaces&#xD;│ └── ... # Other public interfaces&#xD;└── internal/ # Private implementation - not importable&#xD;├── agents/ # Concrete agent implementations&#xD;├── mcp/ # MCP client and server management&#xD;├── llm/ # LLM provider implementations&#xD;├── orchestrator/ # Workflow orchestration logic&#xD;└── ... # Other implementation packages&#xD;Design Principles 1. Interface Segregation Public interfaces are defined in core/:</description>
    </item>
    <item>
      <title>AddingFeatures</title>
      <link>http://localhost:1313/AgenticGoKitDocs/contributors/addingfeatures/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/contributors/addingfeatures/index.html</guid>
      <description>Adding Features to AgenticGoKit This guide walks through the process of adding new features to AgenticGoKit, from design to implementation to testing and documentation.&#xA;🎯 Feature Development Philosophy AgenticGoKit follows these principles for feature development:&#xA;User-Centric: Features should solve real user problems API-First: Design public APIs before implementation Backward Compatibility: Maintain compatibility when possible Performance-Aware: Consider performance implications Test-Driven: Write tests alongside code Documentation-Complete: Include comprehensive documentation 📋 Feature Development Process 1. Feature Proposal Phase Create Feature Request Start with a GitHub issue using the feature request template:</description>
    </item>
    <item>
      <title>Testing</title>
      <link>http://localhost:1313/AgenticGoKitDocs/contributors/testing/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/contributors/testing/index.html</guid>
      <description>Testing Strategy This document outlines the comprehensive testing approach for AgenticGoKit, covering unit tests, integration tests, benchmarks, and quality assurance practices.&#xA;🎯 Testing Philosophy AgenticGoKit follows a multi-layered testing strategy:&#xA;Unit Tests: Test individual components in isolation Integration Tests: Test component interactions and workflows End-to-End Tests: Test complete user scenarios Performance Tests: Validate performance characteristics Chaos Tests: Test resilience under failure conditions 🏗️ Test Organization Directory Structure agenticgokit/&#xD;├── core/ # Public API tests&#xD;│ ├── agent_test.go&#xD;│ ├── runner_test.go&#xD;│ ├── mcp_test.go&#xD;│ └── *_test.go&#xD;├── internal/ # Implementation tests&#xD;│ ├── agents/&#xD;│ │ └── *_test.go&#xD;│ ├── mcp/&#xD;│ │ └── *_test.go&#xD;│ └── */&#xD;│ └── *_test.go&#xD;├── integration/ # Integration tests&#xD;│ ├── mcp_integration_test.go&#xD;│ ├── workflow_integration_test.go&#xD;│ └── *_integration_test.go&#xD;├── benchmarks/ # Performance benchmarks&#xD;│ ├── agent_benchmark_test.go&#xD;│ ├── mcp_benchmark_test.go&#xD;│ └── *_benchmark_test.go&#xD;└── testdata/ # Test fixtures and data&#xD;├── configs/&#xD;├── fixtures/&#xD;└── mocks/&#xD;Test File Naming Conventions Pattern Purpose Example *_test.go Unit tests agent_test.go *_integration_test.go Integration tests mcp_integration_test.go *_benchmark_test.go Benchmarks runner_benchmark_test.go mock_*.go Mock implementations mock_llm_provider.go test_*.go Test utilities test_helpers.go 🧪 Unit Testing Test Structure Follow the AAA (Arrange, Act, Assert) pattern:</description>
    </item>
    <item>
      <title>DocsStandards</title>
      <link>http://localhost:1313/AgenticGoKitDocs/contributors/docsstandards/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/contributors/docsstandards/index.html</guid>
      <description>Documentation Standards This guide outlines the standards and best practices for writing and maintaining AgenticGoKit documentation.&#xA;Table of Contents Documentation Philosophy Structure and Organization Writing Guidelines Code Examples File Naming and Organization Maintenance and Updates Documentation Philosophy AgenticGoKit documentation follows these core principles:&#xA;1. User-Centric Approach Start with the user’s goal - What are they trying to accomplish? Provide immediate value - Get users to success quickly Explain the “why” not just the “how” Include real-world context and use cases 2. Clarity and Accessibility Write for beginners while providing depth for experts Use clear, concise language - avoid jargon when possible Structure content logically with clear headings and flow Make content scannable with bullet points, code blocks, and visual breaks 3. Accuracy and Completeness Keep examples working - test all code samples Stay current with the codebase - documentation should never lag behind features Provide complete context - don’t assume prior knowledge Link between related concepts to build understanding 4. Separation of Concerns User docs focus on building with AgenticGoKit Contributor docs focus on extending AgenticGoKit API reference provides comprehensive technical details Examples demonstrate practical applications Structure and Organization Documentation Hierarchy docs/&#xD;├── README.md # Main documentation index&#xD;├── Architecture.md # High-level system overview&#xD;├── ROADMAP.md # Project roadmap (maintained separately)&#xD;├── guides/ # User-focused tutorials and guides&#xD;│ ├── AgentBasics.md # Getting started with agents&#xD;│ ├── Examples.md # Practical code examples&#xD;│ ├── ToolIntegration.md # MCP and tool usage&#xD;│ ├── Providers.md # LLM provider setup&#xD;│ ├── Configuration.md # Project configuration&#xD;│ ├── Production.md # Deployment and scaling&#xD;│ ├── ErrorHandling.md # Error handling patterns&#xD;│ ├── CustomTools.md # Building MCP servers&#xD;│ └── Performance.md # Optimization guide&#xD;├── api/ # Technical API reference&#xD;│ ├── core.md # Core package API&#xD;│ ├── agents.md # Agent interfaces&#xD;│ ├── mcp.md # MCP integration API&#xD;│ └── cli.md # CLI command reference&#xD;├── contributors/ # Contributor-focused documentation&#xD;│ ├── ContributorGuide.md # Getting started contributing&#xD;│ ├── CoreVsInternal.md # Codebase architecture&#xD;│ ├── Testing.md # Testing strategy&#xD;│ ├── ReleaseProcess.md # Release management&#xD;│ ├── AddingFeatures.md # Feature development&#xD;│ ├── CodeStyle.md # Code standards&#xD;│ └── DocsStandards.md # This document&#xD;└── archive/ # Archived/outdated documents&#xD;└── ... # Migration docs, old plans, etc.&#xD;Cross-References Always provide clear navigation paths:</description>
    </item>
  </channel>
</rss>