<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>content :: AgenticGoKit Docs</title>
    <link>http://localhost:1313/AgenticGoKitDocs/index.html</link>
    <description>AgenticGoKit Documentation The Go Framework for Building Multi-Agent AI Systems&#xA;Build intelligent agent workflows with dynamic tool integration, multi-provider LLM support, and enterprise-grade orchestration patterns. Go-native performance meets AI agent systems.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/AgenticGoKitDocs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>content</title>
      <link>http://localhost:1313/AgenticGoKitDocs/readme/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/readme/index.html</guid>
      <description>AgenticGoKit Documentation The Complete Guide to Building AI Agent Systems in Go&#xA;AgenticGoKit is a production-ready Go framework for building intelligent agent workflows with dynamic tool integration, multi-provider LLM support, and enterprise-grade patterns.&#xA;üìö Documentation Structure üöÄ Learning Paths New to AgenticGoKit? Follow these guided paths:&#xA;Beginner Path (30 minutes) 5-Minute Quickstart - Get running immediately Your First Agent - Build a simple agent Multi-Agent Collaboration - Agents working together Intermediate Path (1 hour) Memory &amp; RAG - Add knowledge capabilities Tool Integration - Connect external tools Core Concepts - Deep dive into fundamentals Advanced Path (2+ hours) Advanced Patterns - Complex orchestration patterns Production Deployment - Deploy to production Performance Optimization - Scale your systems Getting Started 5-Minute Quickstart - Get running immediately Your First Agent - Build a simple agent from scratch Multi-Agent Collaboration - Agents working together Memory &amp; RAG - Add knowledge capabilities Tool Integration - Connect external tools Production Deployment - Deploy to production Core Concepts Agent Fundamentals - Understanding AgentHandler interface and patterns Memory &amp; RAG - Persistent memory, vector search, and knowledge bases Multi-Agent Orchestration - Orchestration patterns and API reference Orchestration Configuration - Complete guide to configuration-based orchestration Examples &amp; Tutorials - Practical examples and code samples Tool Integration - MCP protocol and dynamic tool discovery LLM Providers - Azure, OpenAI, Ollama, and custom providers Configuration - Managing agentflow.toml and environment setup Advanced Usage Advanced Patterns - Advanced orchestration patterns and configuration RAG Configuration - Retrieval-Augmented Generation setup and tuning Memory Provider Setup - PostgreSQL, Weaviate, and in-memory setup guides Workflow Visualization - Generate and customize Mermaid diagrams Production Deployment - Scaling, monitoring, and best practices Error Handling - Resilient agent workflows Custom Tools - Building your own MCP servers Performance Tuning - Optimization and benchmarking API Reference Core Package API - Complete public API reference Agent Interface - AgentHandler and related types Memory API - Memory system and RAG APIs MCP Integration - Tool discovery and execution APIs CLI Commands - agentcli reference üîß For AgenticGoKit Contributors Want to contribute to AgenticGoKit? See our Contributor Documentation for:</description>
    </item>
    <item>
      <title>guides</title>
      <link>http://localhost:1313/AgenticGoKitDocs/guides/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/guides/index.html</guid>
      <description>How-To Guides Navigation: Documentation Home ‚Üí Guides&#xA;Task-oriented guides for specific development scenarios and common tasks.&#xA;Quick Navigation Setup &amp; Configuration LLM Providers - Configure different LLM providers Vector Databases - Set up vector storage for RAG MCP Tools - Integrate Model Context Protocol tools Development Testing Agents - Test multi-agent systems Debugging - Debug agent interactions Best Practices - Development best practices Web Search Integration - Add web search capabilities to agents Research Assistant - Build multi-agent research systems Visualization - Generate workflow diagrams with Mermaid Framework &amp; Tools Framework Comparison - Compare AgenticGoKit with other frameworks Troubleshooting - Common issues and solutions Deployment &amp; Operations Production Deployment - Deploy and scale your agents Guide Structure Each guide follows this format:</description>
    </item>
    <item>
      <title>contributors</title>
      <link>http://localhost:1313/AgenticGoKitDocs/contributors/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/contributors/index.html</guid>
      <description>Contributor Documentation Navigation: Documentation Home ‚Üí Contributors&#xA;For developers contributing to AgenticGoKit&#xA;This section contains documentation specifically for contributors to the AgenticGoKit project. If you‚Äôre looking to use AgenticGoKit in your projects, see the main documentation.&#xA;üöÄ Getting Started Essential Reading Contributor Guide - Start here! Development setup and contribution workflow Core vs Internal - Understanding the public API vs implementation details Code Style - Go standards and project conventions Development Process Adding Features - How to extend AgenticGoKit with new features Testing Strategy - Unit tests, integration tests, and benchmarks Documentation Standards - Writing user-focused documentation Project Management Release Process - How releases are managed and versioned üèóÔ∏è Architecture Overview AgenticGoKit is designed with a clear separation between public APIs and internal implementation:</description>
    </item>
    <item>
      <title>reference</title>
      <link>http://localhost:1313/AgenticGoKitDocs/reference/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/reference/index.html</guid>
      <description>AgenticGoKit API Reference Navigation: Documentation Home ‚Üí API Reference&#xA;Complete API documentation for building multi-agent systems&#xA;This section provides comprehensive documentation for all public APIs in AgenticGoKit. The framework is designed with a clean, intuitive interface that makes building complex agent systems straightforward.&#xA;üìö API Overview AgenticGoKit‚Äôs API is organized around several core concepts:&#xA;Agent API - Individual agents that process events and states Orchestration API - Multi-agent coordination and workflow patterns State &amp; Events - Data flow and communication between agents Memory API - Persistent storage, RAG, and knowledge management MCP Integration - Tool integration via Model Context Protocol Configuration API - System configuration and setup üèóÔ∏è Architecture Overview graph TB&#xD;subgraph &#34;Core Interfaces&#34;&#xD;Agent[Agent Interface]&#xD;AgentHandler[AgentHandler Interface]&#xD;Runner[Runner Interface]&#xD;Orchestrator[Orchestrator Interface]&#xD;end&#xD;subgraph &#34;Data Flow&#34;&#xD;Event[Event]&#xD;State[State]&#xD;AgentResult[AgentResult]&#xD;end&#xD;subgraph &#34;Advanced Features&#34;&#xD;Memory[Memory System]&#xD;MCP[MCP Tools]&#xD;Config[Configuration]&#xD;end&#xD;Agent --&gt; AgentHandler&#xD;AgentHandler --&gt; Runner&#xD;Runner --&gt; Orchestrator&#xD;Event --&gt; AgentHandler&#xD;State --&gt; AgentHandler&#xD;AgentHandler --&gt; AgentResult&#xD;Memory --&gt; Agent&#xD;MCP --&gt; Agent&#xD;Config --&gt; Runner&#xD;üöÄ Quick Start Basic Agent Creation package main import ( &#34;context&#34; &#34;fmt&#34; &#34;github.com/kunalkushwaha/agenticgokit/core&#34; ) func main() { // Create a simple agent agent := core.AgentHandlerFunc(func(ctx context.Context, event core.Event, state core.State) (core.AgentResult, error) { message := event.Data[&#34;message&#34;].(string) return core.AgentResult{ Data: map[string]interface{}{ &#34;response&#34;: fmt.Sprintf(&#34;Processed: %s&#34;, message), }, }, nil }) // Create a runner and register the agent runner := core.NewRunner() runner.RegisterAgent(&#34;processor&#34;, agent) // Process an event event := core.NewEvent(&#34;process&#34;, map[string]interface{}{ &#34;message&#34;: &#34;Hello, AgenticGoKit!&#34;, }) results, err := runner.ProcessEvent(context.Background(), event) if err != nil { panic(err) } fmt.Printf(&#34;Response: %s\n&#34;, results[&#34;processor&#34;].Data[&#34;response&#34;]) }&#xD;Multi-Agent Collaboration func collaborativeExample() { // Create multiple agents agents := map[string]core.AgentHandler{ &#34;analyzer&#34;: core.AgentHandlerFunc(func(ctx context.Context, event core.Event, state core.State) (core.AgentResult, error) { text := event.Data[&#34;text&#34;].(string) analysis := analyzeText(text) // Your analysis logic return core.AgentResult{ Data: map[string]interface{}{ &#34;analysis&#34;: analysis, &#34;word_count&#34;: len(strings.Fields(text)), }, }, nil }), &#34;summarizer&#34;: core.AgentHandlerFunc(func(ctx context.Context, event core.Event, state core.State) (core.AgentResult, error) { text := event.Data[&#34;text&#34;].(string) summary := summarizeText(text) // Your summarization logic return core.AgentResult{ Data: map[string]interface{}{ &#34;summary&#34;: summary, }, }, nil }), } // Create collaborative runner runner := core.CreateCollaborativeRunner(agents, 30*time.Second) // Process with multiple agents event := core.NewEvent(&#34;analyze&#34;, map[string]interface{}{ &#34;text&#34;: &#34;Long document text here...&#34;, }) results, _ := runner.ProcessEvent(context.Background(), event) // Both agents processed the event in parallel fmt.Printf(&#34;Analysis: %v\n&#34;, results[&#34;analyzer&#34;].Data[&#34;analysis&#34;]) fmt.Printf(&#34;Summary: %s\n&#34;, results[&#34;summarizer&#34;].Data[&#34;summary&#34;]) }&#xD;üîß Core Interfaces Agent vs AgentHandler AgenticGoKit provides two main interfaces for creating agents:</description>
    </item>
    <item>
      <title>tutorials</title>
      <link>http://localhost:1313/AgenticGoKitDocs/tutorials/index.html</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/AgenticGoKitDocs/tutorials/index.html</guid>
      <description>Tutorials Navigation: Documentation Home ‚Üí Tutorials&#xA;Learning-oriented guides to help you understand and use AgenticGoKit effectively.&#xA;Learning Paths Beginner Path Start here if you‚Äôre new to AgenticGoKit:&#xA;Your First Agent - Create a simple agent Multi-Agent Collaboration - Learn agent orchestration Memory and RAG - Add knowledge capabilities Tool Integration - Connect external tools Production Deployment - Deploy to production Core Concepts Path Understand the fundamental concepts:&#xA;Agent Lifecycle - How agents work internally State Management - Data flow between agents Error Handling - Robust error management Orchestration Patterns - Multi-agent coordination Advanced Path For experienced users building complex systems:</description>
    </item>
  </channel>
</rss>